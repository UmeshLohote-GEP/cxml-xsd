<?xml version="1.0" encoding="UTF-8"?>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.39.1+/Modules/Profile.mod#1 $
-->
<!--
    For more information about these elements/entities, see the 
    cXML Reference Guide and related documents.
-->
<xs:schema xmlns="http://cxml.org" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://cxml.org" xmlns:tns="http://cxml.org" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
  elementFormDefault="unqualified">
  <!-- Import xml: namespace -->
  <xs:import namespace="http://www.w3.org/XML/1998/namespace"
        schemaLocation="http://www.w3.org/2001/xml.xsd" />
  <!-- Import ds: namespace -->
  <xs:import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="ds.xsd" />
  <xs:include schemaLocation="cxml-base.xsd"/>
  
  <!-- ====
   This module defines several elements used to construct Type definitions
   describing parametric catalog item data. These elements are intended
   to replace the deprecated SearchGroup and SearchGroupAttribute element
   definitions. These elements provide a richer and more general framework
   for defining parametric Types, and they allow the definition/standardization
   of parametric Types from a TypeProvider organization independent of the
   Index data in which the current SearchGroup elements are.

   Note that the SearchGroupData and SearchDataElement element definitions
   are used to specify the actual parametric data for a given catalog item.
   The SearchGroupData element must reference a known, defined Type, and
   the SearchDataElement elements are used to specific data for each
   TypeAttribute within that Type.
  ==== -->
  <xs:element name="TypeDefinition">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tns:TypeProvider"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="tns:Comments"/>
        <xs:choice minOccurs="1" maxOccurs="unbounded">
          <xs:element ref="tns:PrimitiveType"/>
          <xs:element ref="tns:Type"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <!-- ====
   The provider of these type definitions, identified by a name and one
   or more ID's, e.g., NetworkID AN001001001, or DUNS 444455556.

   Note the required name attribute and the optional list of Name
   children. The optional list is for localized display purposes,
   allowing different names to be provided per locale. The name
   attribute is the "canonical" name used to reference the type
   provider when fully qualifying the name of a type (e.g., in a
   SearchGroupData element reference). See a word below on
   Type naming.
  ==== -->
  <xs:element name="TypeProvider">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="tns:Name"/>
        <xs:element ref="tns:OrganizationID"/>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>
  
  <!--
   =====================================================
   A Type is a named element containing one or more TypeAttributes. A
   Type may "extend" (or "derive from") another Type, thus inheriting
   its parents TypeAttributes. There is one important distinction
   between Type inheritance and a normal OO inheritance model: child
   TypeAttributes may *not* override parent TypeAttributes. It is
   considered illegal to define a TypeAttribute of the same name as
   a parent TypeAttribute.

   Type descriptions may be provided in multiple locales through the
   optional Description child element list. The ShortName element
   within that Description should be used to provide an alternative
   locale specific name for the Type. The required name attribute
   should be used within the SearchGroupData element to reference
   a given Type.

   A Type name is always scoped by a TypeProvider name, allowing for
   the existence of multiple Type taxonomies. Applications should
   respect a short-hand notation for a fully-qualified type name
   outside a defined TypeProvider scope of the form:

            "TypeProviderName:TypeName"

   E.g., if an organization named "UNSPSC" provides a type definition
   called "Pipe" which defines the parametric attributes of a Pipe,
   that Pipe Type would be referenced as "UNSPSC:Pipe" when referenced
   in a SearchGroupData name.
   =====================================================
  -->
  <xs:element name="Type">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="tns:Name"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="tns:Description"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="tns:TypeAttribute"/>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="extends" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  
  <!--
   =====================================================
    An attribute within a Type. The name attribute is required and is the name
    used in the SearchDataElement element. The optional Name element children
    may be used to provide locale-specific alternative names for this attribute.

    TypeAttributes themselves are of a named type, as indicated by the "type"
    attribute. The name may be another Type, or a PrimitiveType, defined below.

    shortTag        Alias for attribute, reserved for future use.

    mappedFrom      For fields that are defined implicitly from other objects in
                    the system specify location.

    isRequired      Indicates whether a (non-empty) value for the given attribute
                    is required.

    isRefinable     Indicates whether the given attribute is refinable in search
                    queries. All refinable attributes are currently indexed.

    isRequiredForOrdering Indicates that the value for an attribute must be 
                    provided as part of an order sent to the supplier

    isSearchable    Indicates whether the given attribute is searchable in search
                    queries. All searchable Attributes are currently indexed.

    isCollection    Indicates whether repeating values are allowed for the given
                    attribute

    isCaseSensitive Indicates whether case should be preserved for the given
                    attribute. This property only applies to attributes of type string
                    or literal. It has no effect on numeric, boolean, or date
                    attributes, nor does it apply to attributes of complex type.

    isInKey         Indicates whether the given attribute should be considered part
                    of the unique key for the type.

    isInFreeTextSearch Indicates whether the given attribute value should be indexed
                       to be a candidate in a free-text (All) query.

    isHidden        Indicates whether or not this attribute is displayable to a user.

    isSortable      Indicates if this attribute can be sorted.

    isReadOnly      Indicates if the value is frozen and can't be changed by the
                    receiving application.

    unit            Optional string indicating the unit of the given attribute, if
                    applicable. E.g., if the TypeAttribute is of a PrimitiveType
                    with a scalar type of "integer", this unit might be "IN" to
                    indicate inches.
   =====================================================
  -->
  <xs:element name="TypeAttribute">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="tns:Name"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="tns:Description"/>
        <xs:choice minOccurs="0" maxOccurs="1">
          <xs:element minOccurs="1" maxOccurs="unbounded" ref="tns:EnumerationValue"/>
          <xs:element ref="tns:Range"/>
        </xs:choice>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="tns:Extrinsic"/>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="type" type="xs:string" use="required"/>
      <xs:attribute name="shortTag" type="xs:string"/>
      <xs:attribute name="mappedFrom" type="xs:string"/>
      <xs:attribute name="isRequired">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="isRequiredForOrdering">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="isRefinable">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="isSearchable">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="isCollection">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="isCaseSensitive">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="isInKey">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="isInFreeTextSearch">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="isHidden">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="isSortable">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="isReadOnly">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="unit" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  
  <!--
   EnumerationValue allows one to specify a set of one or more
   valid data values for the given TypeAttribute.
  -->
  <xs:element name="EnumerationValue">
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <!--
   Range allows one to specify a range of valid data values for a
   given TypeAttribute
  -->
  <xs:element name="Range">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tns:RangeBegin"/>
        <xs:element ref="tns:RangeEnd"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="RangeBegin">
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" />
      </xs:sequence>
      <xs:attribute name="inclusive">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="RangeEnd">
    <xs:complexType mixed="true">
      <xs:sequence>
        <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" />
      </xs:sequence>
      <xs:attribute name="inclusive">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  
  <!--
   =====================================================
   PrimitiveType is a named scalar type, where the list of recognized
   scalar types is given above. These types can be thought of as
   re-usable building blocks for defining simple TypeAttributes, e.g.,
   a string of length 255, etc.

   min          Optional attribute indicating the minimum length for
                a TypeAttribute of scalarType "string" or "literal"

   max          Optional attribute indicating the maximum length for
                a TypeAttribute of scalarType "string" or "literal"

   maxPrecision Optional attribute indicating the maximum precision for
                a TypeAttribute of scalarType "double"

   maxScale     Optional attribute indicating the maximum scale for
                a TypeAttribute of scalarType "double"

   =====================================================
  -->
  <xs:element name="PrimitiveType">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="1" ref="tns:Description" />
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required" />
      <xs:attribute name="type" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="integer" />
            <xs:enumeration value="string" />
            <xs:enumeration value="literal" />
            <xs:enumeration value="double" />
            <xs:enumeration value="date" />
            <xs:enumeration value="boolean" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="min" type="xs:string" />
      <xs:attribute name="max" type="xs:string" />
      <xs:attribute name="maxPrecision" type="xs:string" />
      <xs:attribute name="maxScale" type="xs:string" />
    </xs:complexType>
  </xs:element>
</xs:schema>